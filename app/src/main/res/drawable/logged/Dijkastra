
#include <iostream>
#include <cstring>
#include <climits>

using namespace std;

#define V 5 // number of vertices in the graph


//The minDistance function is defined to return the vertex with minimum distance from the source vertex.
//dist is an array of the distances of all vertices from the source vertex, and sptSet is a Boolean array that keeps track of which vertices have been included in the shortest path tree.

int minDistance(int dist[], bool sptSet[]) {
    int minDist = INT_MAX, minIndex;
    
    // find the vertex with minimum distance from the source vertex
    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= minDist) {
            minDist = dist[v];
            minIndex = v;
        }
    }
    
    return minIndex;
}

void printSolution(int dist[]) {
    cout << "Vertex \t Distance from Source\n";
    for (int i = 0; i < V; i++) {
        cout << i << "\t\t" << dist[i] << "\n";
    }
}

void dijkstra(int graph[V][V], int src) {
    int dist[V]; // array to store the shortest distance from source to each vertex
    bool sptSet[V]; // array to keep track of vertices included in shortest path tree
    
    // initialize all distances as infinite and sptSet[] as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }
    
    // distance from source vertex to itself is always 0
    dist[src] = 0;
    
    // find shortest path for all vertices
    for (int count = 0; count < V-1; count++) {
        // pick the minimum distance vertex from the set of vertices not yet processed
        int u = minDistance(dist, sptSet);
        
        // mark the picked vertex as processed
        sptSet[u] = true;
        
        // update dist[v] if there is an edge from u to v and total distance from source to v through u is smaller than current value of dist[v]
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
    
    // print the shortest distances
    printSolution(dist);
}

/*
The loop iterates over all the vertices v that are adjacent to the current vertex u. If vertex v is not already included in the shortest path tree (not in sptSet[]), and there exists an edge between u and v (graph[u][v] != 0), and the total distance from the source to vertex v through vertex u (dist[u] + graph[u][v]) is smaller than the current value of dist[v], then dist[v] is updated with the new value (dist[u] + graph[u][v]).

The condition dist[u] != INT_MAX is used to ensure that overflow does not occur while performing the addition, and to prevent integer overflow.

In simpler terms, this step is used to update the shortest distance from the source vertex to all the adjacent vertices of the current vertex, if a shorter path is found through the current vertex.
*/





int main() {
    // sample graph represented as an adjacency matrix
    int graph[V][V] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };
    
    dijkstra(graph, 0); // find shortest path from vertex 0
    
    return 0;
}



  0  1  2  3  4  5  6  7  8  
0 0  4  0  0  0  0  0  8  0  
1 4  0  8  0  0  0  0  11 0  
2 0  8  0  7  0  4  0  0  2  
3 0  0  7  0  9  14 0  0  0  
4 0  0  0  9  0  10 0  0  0  
5 0  0  4  14 10 0  2  0  0  
6 0  0  0  0  0  2  0  1  6  
7 8  11 0  0  0  0  1  0  7  
8 0  0  2  0  0  0  6  7  0  






